(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{232:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"content"},[e("p",[this._v("用react和redux来构建前端网页应用，这两者都奉行这样一个公式UI=render(state)来产生用户界面。react适合于视图层面的东西，但是不能指望靠react来管理应用的状态，redux才适合担当应用状态的管理工作。\n从架构出发，当我们开始一个新的应用的时候，有几件事情是一定要考虑清楚的；\n1代码文件的组织结构（按角色组织，按功能组织）\n2确定模块的边界\n3store的状态树设计\n这三件事情，是构建一个应用的基础。")]),this._v(" "),e("p",[this._v("“在最理想的情况下，我们应该通过增加代码就能增加系统的功能，而不是通过对现有代码的修改来增加功能。”——-Robert C.Martin\n阐述了对模块化软件的要求")]),this._v(" "),e("p",[this._v("不同功能模块之间的依赖关系应该简单而且清晰，也就是所谓的保持模块之间的低耦合性；一个模块应该把自己的功能封装得很好，让外界不要太依赖与自己内部的结构，这样不会因为内部的变化而影响外部模块的功能，这就是所谓高内聚性。")]),this._v(" "),e("Valine")],1)},[],!1,null,null,null);e.default=r.exports}}]);